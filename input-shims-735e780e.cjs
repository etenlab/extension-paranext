"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const l=require("./crowd-bible-extension.web-view-7654aaa3.cjs");require("react");require("papi");/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */const b=new WeakMap,g=(e,n,t,r=0,o=!1)=>{b.has(e)!==t&&(t?P(e,n,r,o):p(e,n))},B=e=>e===e.getRootNode().activeElement,P=(e,n,t,r=!1)=>{const o=n.parentNode,s=n.cloneNode(!1);s.classList.add("cloned-input"),s.tabIndex=-1,r&&(s.disabled=!0),o.appendChild(s),b.set(e,s);const c=e.ownerDocument.dir==="rtl"?9999:-9999;e.style.pointerEvents="none",n.style.transform=`translate3d(${c}px,${t}px,0) scale(0)`},p=(e,n)=>{const t=b.get(e);t&&(b.delete(e),t.remove()),e.style.pointerEvents="",n.style.transform=""},M=(e,n,t)=>{if(!t||!n)return()=>{};const r=c=>{B(n)&&g(e,n,c)},o=()=>g(e,n,!1),s=()=>r(!0),a=()=>r(!1);return l.addEventListener(t,"ionScrollStart",s),l.addEventListener(t,"ionScrollEnd",a),n.addEventListener("blur",o),()=>{l.removeEventListener(t,"ionScrollStart",s),l.removeEventListener(t,"ionScrollEnd",a),n.removeEventListener("blur",o)}},I="input, textarea, [no-blur], [contenteditable]",N=()=>{let e=!0,n=!1;const t=document,r=()=>{n=!0},o=()=>{e=!0},s=a=>{if(n){n=!1;return}const c=t.activeElement;if(!c||c.matches(I))return;const d=a.target;d!==c&&(d.matches(I)||d.closest(I)||(e=!1,setTimeout(()=>{e||c.blur()},50)))};return l.addEventListener(t,"ionScrollStart",r),t.addEventListener("focusin",o,!0),t.addEventListener("touchend",s,!1),()=>{l.removeEventListener(t,"ionScrollStart",r,!0),t.removeEventListener("focusin",o,!0),t.removeEventListener("touchend",s,!1)}},x=.3,R=(e,n,t)=>{var r;const o=(r=e.closest("ion-item,[ion-item]"))!==null&&r!==void 0?r:e;return _(o.getBoundingClientRect(),n.getBoundingClientRect(),t,e.ownerDocument.defaultView.innerHeight)},_=(e,n,t,r)=>{const o=e.top,s=e.bottom,a=n.top,c=Math.min(n.bottom,r-t),d=a+15,f=c*.75-s,S=d-o,m=Math.round(f<0?-f:S>0?-S:0),h=Math.min(m,o-a),i=Math.abs(h)/x,v=Math.min(400,Math.max(150,i));return{scrollAmount:h,scrollDuration:v,scrollPadding:t,inputSafeY:-(o-d)+4}},O=(e,n,t,r,o,s=!1)=>{let a;const c=u=>{a=l.pointerCoord(u)},d=u=>{if(!a)return;const f=l.pointerCoord(u);!F(6,a,f)&&!B(n)&&K(e,n,t,r,o,s)};return e.addEventListener("touchstart",c,{capture:!0,passive:!0}),e.addEventListener("touchend",d,!0),()=>{e.removeEventListener("touchstart",c,!0),e.removeEventListener("touchend",d,!0)}},K=async(e,n,t,r,o,s=!1)=>{if(!t&&!r)return;const a=R(e,t||r,o);if(t&&Math.abs(a.scrollAmount)<4){n.focus();return}if(g(e,n,!0,a.inputSafeY,s),n.focus(),l.raf(()=>e.click()),typeof window<"u"){let c;const d=async()=>{c!==void 0&&clearTimeout(c),window.removeEventListener("ionKeyboardDidShow",u),window.removeEventListener("ionKeyboardDidShow",d),t&&await l.scrollByPoint(t,0,a.scrollAmount,a.scrollDuration),g(e,n,!1,a.inputSafeY),n.focus()},u=()=>{window.removeEventListener("ionKeyboardDidShow",u),window.addEventListener("ionKeyboardDidShow",d)};if(t){const f=await l.getScrollElement(t),S=f.scrollHeight-f.clientHeight;if(a.scrollAmount>S-f.scrollTop){n.type==="password"?(a.scrollAmount+=50,window.addEventListener("ionKeyboardDidShow",u)):window.addEventListener("ionKeyboardDidShow",d),c=setTimeout(d,1e3);return}}d()}},F=(e,n,t)=>{if(n&&t){const r=n.x-t.x,o=n.y-t.y;return r*r+o*o>e*e}return!1},T="$ionPaddingTimer",k=e=>{const n=document,t=o=>{C(o.target,e)},r=o=>{C(o.target,0)};return n.addEventListener("focusin",t),n.addEventListener("focusout",r),()=>{n.removeEventListener("focusin",t),n.removeEventListener("focusout",r)}},C=(e,n)=>{var t,r;if(e.tagName!=="INPUT"||e.parentElement&&e.parentElement.tagName==="ION-INPUT"||((r=(t=e.parentElement)===null||t===void 0?void 0:t.parentElement)===null||r===void 0?void 0:r.tagName)==="ION-SEARCHBAR")return;const o=l.findClosestIonContent(e);if(o===null)return;const s=o[T];s&&clearTimeout(s),n>0?o.style.setProperty("--keyboard-offset",`${n}px`):o[T]=setTimeout(()=>{o.style.setProperty("--keyboard-offset","0px")},120)},q=!0,H=!0,U=(e,n)=>{const t=document,r=n==="ios",o=n==="android",s=e.getNumber("keyboardHeight",290),a=e.getBoolean("scrollAssist",!0),c=e.getBoolean("hideCaretOnScroll",r),d=e.getBoolean("inputBlurring",r),u=e.getBoolean("scrollPadding",!0),f=Array.from(t.querySelectorAll("ion-input, ion-textarea")),S=new WeakMap,m=new WeakMap,h=async i=>{await new Promise(y=>l.componentOnReady(i,y));const v=i.shadowRoot||i,L=v.querySelector("input")||v.querySelector("textarea"),w=l.findClosestIonContent(i),D=w?null:i.closest("ion-footer");if(!L)return;if(w&&c&&!S.has(i)){const y=M(i,L,w);S.set(i,y)}if(!(L.type==="date"||L.type==="datetime-local")&&(w||D)&&a&&!m.has(i)){const y=O(i,L,w,D,s,o);m.set(i,y)}},A=i=>{if(c){const v=S.get(i);v&&v(),S.delete(i)}if(a){const v=m.get(i);v&&v(),m.delete(i)}};d&&q&&N(),u&&H&&k(s);for(const i of f)h(i);t.addEventListener("ionInputDidLoad",i=>{h(i.detail)}),t.addEventListener("ionInputDidUnload",i=>{A(i.detail)})};exports.startInputShims=U;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
