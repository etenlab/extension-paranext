"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const l=require("./crowd-bible-extension.web-view-7654aaa3.cjs");require("react");require("papi");/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */const y=o=>{let i=-E*10,a=0,t,p,s;const C=o.getBoolean("animated",!0)&&o.getBoolean("rippleEffect",!0),u=new WeakMap,I=e=>{i=l.now(e),T(e)},m=e=>{i=l.now(e),w(e)},_=e=>{if(e.button===2)return;const n=l.now(e)-E;i<n&&T(e)},q=e=>{const n=l.now(e)-E;i<n&&w(e)},v=()=>{s&&clearTimeout(s),s=void 0,t&&(D(!1),t=void 0)},T=e=>{t||h(M(e),e)},w=e=>{h(void 0,e)},h=(e,n)=>{if(e&&e===t)return;s&&clearTimeout(s),s=void 0;const{x:d,y:r}=l.pointerCoord(n);if(t){if(u.has(t))throw new Error("internal error");t.classList.contains(f)||L(t,d,r),D(!0)}if(e){const b=u.get(e);b&&(clearTimeout(b),u.delete(e)),e.classList.remove(f);const R=()=>{L(e,d,r),s=void 0};S(e)?R():s=setTimeout(R,B)}t=e},L=(e,n,d)=>{if(a=Date.now(),e.classList.add(f),!C)return;const r=k(e);r!==null&&(A(),p=r.addRipple(n,d))},A=()=>{p!==void 0&&(p.then(e=>e()),p=void 0)},D=e=>{A();const n=t;if(!n)return;const d=g-Date.now()+a;if(e&&d>0&&!S(n)){const r=setTimeout(()=>{n.classList.remove(f),u.delete(n)},g);u.set(n,r)}else n.classList.remove(f)},c=document;c.addEventListener("ionGestureCaptured",v),c.addEventListener("touchstart",I,!0),c.addEventListener("touchcancel",m,!0),c.addEventListener("touchend",m,!0),c.addEventListener("pointercancel",v,!0),c.addEventListener("mousedown",_,!0),c.addEventListener("mouseup",q,!0)},M=o=>{if(o.composedPath!==void 0){const i=o.composedPath();for(let a=0;a<i.length-2;a++){const t=i[a];if(!(t instanceof ShadowRoot)&&t.classList.contains("ion-activatable"))return t}}else return o.target.closest(".ion-activatable")},S=o=>o.classList.contains("ion-activatable-instant"),k=o=>{if(o.shadowRoot){const i=o.shadowRoot.querySelector("ion-ripple-effect");if(i)return i}return o.querySelector("ion-ripple-effect")},f="ion-activated",B=200,g=200,E=2500;exports.startTapClick=y;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
